--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE dbuser1;
ALTER ROLE dbuser1 WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS PASSWORD 'md53175bce1d3201d16594cebf9d7eb3f9d';






\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 11.4 (Ubuntu 11.4-1.pgdg18.04+1)
-- Dumped by pg_dump version 11.4 (Ubuntu 11.4-1.pgdg18.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database dump
--

-- Dumped from database version 11.4 (Ubuntu 11.4-1.pgdg18.04+1)
-- Dumped by pg_dump version 11.4 (Ubuntu 11.4-1.pgdg18.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: DB1; Type: DATABASE; Schema: -; Owner: postgres
--

CREATE DATABASE "DB1" WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8';


ALTER DATABASE "DB1" OWNER TO postgres;

\connect "DB1"

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpython3u; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpython3u WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpython3u; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpython3u IS 'PL/Python3U untrusted procedural language';


--
-- Name: apps1(text, text, bigint, text, integer, json); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.apps1(kind text, name text, uid bigint, akey text, vkey integer, js json) RETURNS json
    LANGUAGE plpgsql
    AS $_$DECLARE v1 text;
BEGIN

  name = lower (name);
  if name = 'curl' then
	--COPY week_number FROM PROGRAM 'curl "http://worldtimeapi.org/api/ip"';
	SELECT 1 FROM http_get('http://worldtimeapi.org/api/ip') into v1;
    RETURN js::text;
  else
  if name = 'adduser' then
    begin
	  insert into user1 (uid, username) values ($3, $2) RETURNING user1.uid into uid;
	EXCEPTION 
	  WHEN OTHERS THEN
           RETURN '{"msg":"add user error"}';		   --RAISE NOTICE 'Insert failed with...';
           return -2;
    End;
	
    RETURN '{"msg":"add user"}';
  else
  if name = 'deluser' then
    Delete From user1 WHERE user1.uid = $3 RETURNING user1.uid into uid;
	if uId = null then
	  RETURN '{"msg":"do not delete the user"}';
	  else RETURN '{"msg":"delete the user: ' || $3 || '"}';
	end if;
  else RETURN '{"msg":"App not found Name:' || $2 || ' uId:' || $3 || '"}';  
  end if;  end if;  end if;
END;$_$;


ALTER FUNCTION public.apps1(kind text, name text, uid bigint, akey text, vkey integer, js json) OWNER TO postgres;

--
-- Name: pystrip(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.pystrip(x text) RETURNS text
    LANGUAGE plpython3u
    AS $$
  global x
  x = x.strip()  # ok now
  return x
$$;


ALTER FUNCTION public.pystrip(x text) OWNER TO postgres;

--
-- Name: tq(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.tq() RETURNS integer
    LANGUAGE plpgsql
    AS $$begin
  return 1;
end$$;


ALTER FUNCTION public.tq() OWNER TO postgres;

--
-- Name: url(character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.url(ur character varying, fixed_url text) RETURNS character varying
    LANGUAGE plpython3u
    AS $$

#select * from url('http://worldclockapi.com/api/json/est/now', '')
#select * from url('https://api.txtlocal.com/send/?apikey=LGtAP6X5k0s-rrTVpmw5dZDX3JS1i2zp5qWcPQhROH&numbers=00989126787542&message=test&sender=soheil&test=test', 'sms')
#import urllib.parse
#global param   param = param.encode('ascii')   ur = ur + '?' + urllib.parse.urlencode (param)
import urllib.request

dic1 = {'-'    : '',
        'sms'  : 'https://api.txtlocal.com/send/?apikey=LGtAP6X5k0s-rrTVpmw5dZDX3JS1i2zp5qWcPQhROH&', 
        'email': 'http://worldclockapi.com/api/json/est/now'}
global fixed_url

return urllib.request.urlopen (dic1.get (fixed_url, '') + ur, timeout = 20).read ()

$$;


ALTER FUNCTION public.url(ur character varying, fixed_url text) OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: apps; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.apps (
    id bigint NOT NULL,
    akey text NOT NULL,
    email text NOT NULL,
    createat timestamp(0) without time zone DEFAULT now()
);


ALTER TABLE public.apps OWNER TO postgres;

--
-- Name: ureg; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ureg (
    uid bigint NOT NULL,
    id_apps bigint NOT NULL,
    vkey integer DEFAULT (floor((random() * (90000)::double precision)) + (10000)::double precision) NOT NULL,
    rkey text,
    createat timestamp(0) without time zone DEFAULT now()
);


ALTER TABLE public.ureg OWNER TO postgres;

--
-- Name: user1; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user1 (
    uid bigint NOT NULL,
    username character varying(20),
    createat timestamp(0) without time zone DEFAULT now(),
    pics bigint[],
    info jsonb,
    email character varying(50),
    CONSTRAINT user1_email_chk_1 CHECK ((("position"('@'::text, (email)::text) > 1) AND ("position"('.'::text, (email)::text) > 1) AND (character_length((email)::text) > 4))),
    CONSTRAINT user1_id_chk_1 CHECK ((uid > 9999))
);


ALTER TABLE public.user1 OWNER TO postgres;

--
-- Data for Name: apps; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.apps (id, akey, email, createat) FROM stdin;
1	key1	soheilemail@gmail.com	2019-07-21 04:00:44
\.


--
-- Data for Name: ureg; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ureg (uid, id_apps, vkey, rkey, createat) FROM stdin;
454	550	41351	\N	2019-07-21 05:04:53
\.


--
-- Data for Name: user1; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user1 (uid, username, createat, pics, info, email) FROM stdin;
98941898	284	2019-07-18 15:46:58	\N	\N	\N
9790941898	2484	2019-07-18 15:54:39	\N	\N	\N
50941898	*2484	2019-07-18 15:57:06	\N	\N	\N
503941898	*42484	2019-07-18 16:07:01	\N	\N	\N
9126787542	adduser	2019-07-22 15:42:58	\N	\N	\N
\.


--
-- Name: user1 User1_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user1
    ADD CONSTRAINT "User1_pkey" PRIMARY KEY (uid);


--
-- Name: apps apps_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.apps
    ADD CONSTRAINT apps_pkey PRIMARY KEY (id);


--
-- Name: apps apps_uq1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.apps
    ADD CONSTRAINT apps_uq1 UNIQUE (akey);


--
-- Name: ureg ureg_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ureg
    ADD CONSTRAINT ureg_pkey PRIMARY KEY (uid, id_apps, vkey);


--
-- Name: ureg ureg_uq1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ureg
    ADD CONSTRAINT ureg_uq1 UNIQUE (rkey);


--
-- Name: user1 user1_uq1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user1
    ADD CONSTRAINT user1_uq1 UNIQUE (username);


--
-- PostgreSQL database dump complete
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 11.4 (Ubuntu 11.4-1.pgdg18.04+1)
-- Dumped by pg_dump version 11.4 (Ubuntu 11.4-1.pgdg18.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: adminpack; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS adminpack WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION adminpack; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION adminpack IS 'administrative functions for PostgreSQL';


--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

